name: CI-CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: devops-docker-app
  REGISTRY: docker.io

jobs:
  ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install deps for tests
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install pytest

      - name: Run unit tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest -q tests/ -vv

      - name: Lint Dockerfile (hadolint)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
        continue-on-error: true

  build-and-push:
    needs: ci
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set VERSION/TAGS
        id: vars
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            VERSION=$(git describe --tags --abbrev=0)
          else
            VERSION="0.0.0-${SHORT_SHA}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@0.22.0
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ steps.vars.outputs.version }}
          format: 'table'
          exit-code: '0'

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
          set -e
          export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          export TAG=${{ steps.vars.outputs.version }}
          export APP_PORT=${{ secrets.APP_PORT }}
          mkdir -p /opt/devops-docker-app
          cd /opt/devops-docker-app
          cat > docker-compose.prod.yml << 'COMPOSE'
          services:
            web:
              image: ${DOCKERHUB_USERNAME}/devops-docker-app:${TAG}
              restart: unless-stopped
              ports:
                - "${APP_PORT:-8080}:8080"
              healthcheck:
                test: ["CMD", "wget", "-qO-", "http://127.0.0.1:8080/health"]
                interval: 30s
                timeout: 3s
                retries: 3
          COMPOSE
          docker compose -f docker-compose.prod.yml pull
          docker compose -f docker-compose.prod.yml up -d
          EOF
